#include <bits/stdc++.h>
using namespace std;
class Node{
	public:
	int data;
	Node *next;
};
int size_of(Node* head){
int counter = 0;
while(head != NULL){
    head = head->next;
    counter++;
}
return counter;
}
void insert_at(Node** head, int data , int position){
Node* temp = new Node();
temp->data = data;
temp->next = NULL;
    if(position == 0){
     temp->next = (*head);
     (*head) = temp;
     return;
    }
    int n = size_of( *head);
    if(n < position){
        cout<<"Error ! Position Out of bounds! "<<endl;
        delete temp;
        return;
    }
Node* issue = *head;
while(position-->1)
    issue = issue->next;
if(issue->next != NULL)
    temp->next = issue->next;
    issue->next = temp;
return;
}
void delete_at(Node** head, int position){
    if(head == NULL){
        cout<<"Error! List Underflow!"<<endl;
        return;
    }
    int n = size_of(*head)-1;
    if(position > n){
        cout<<"Error! Position Out of Bounds!"<<endl;
        return;
    }
    if(position == 0){
        Node* temp = (*head);
        (*head) = (*head)->next;
        delete temp;
        return;
    }else if(position == 1){
    Node* temp = (*head)->next;
    (*head)->next = temp->next;
    delete temp;
    return;
    }
    Node* val = (*head);
for(int i =1;i<position;i++)
    (*head) = (*head)->next;
Node* temp = (*head)->next;
if(temp->next == NULL)
    (*head)->next = NULL;
else
(*head)->next = (*head)->next->next;
delete temp;
(*head) = val;
return;
}
void display(Node *node){
	while (node != NULL){
		cout<<node->data<<"-> ";
		node = node->next;
	}
	cout<<"NULL"<<endl;
}
void reversing(Node** head){
int n = size_of(*head);
Node* new_list = NULL;
while(n-->0){
    insert_at(&new_list,(*head)->data,0);
    Node* temp = *head;
    *head = (*head)->next;
    delete temp;
}
(*head) = new_list;
return;
}
void functions(){
    cout<<"Press [I] for insert "<<endl<<"Press [D] for delete "<<endl;
    cout<<"Press [H] for Head Position "<<endl<<"Press [T] for Tail Position"<<endl;
    cout<<"Press [C] for a Custom Position"<<endl<<"Press [R] to Reverse the List"<<endl;
    cout<<"Press [P] to print the Linked List"<<endl<<"Press [X] to terminate the program"<<endl;
}
int main(){
	Node* head = NULL;
	char chara = 'l';
	int val;
	functions();
    cin>>chara;
	while(chara != 'x' && chara != 'X'){
	    if(chara == 'i' || chara == 'I'){
            cout<<"Enter the Position"<<endl;
            cin>>chara;
            if(chara == 'h' || chara == 'H'){
            cout<<"Insert Value to be added"<<endl;
            cin>>val;
            insert_at(&head,val,0);
            }else if(chara == 't' || chara == 'T'){
            cout<<"Insert Value to be added"<<endl;
            cin>>val;
            insert_at(&head,val, size_of(head));
            }else if(chara == 'c' || chara == 'C'){
            int pos;
            cout<<"Enter the Custom Position index"<<endl;
            cin>>pos;
            cout<<"Enter the Value to be added"<<endl;
            cin>>val;
            insert_at(&head,val,pos);
            }else{
                cout<<"Invalid Output!"<<endl;
                functions();
                   }
	    }else if(chara == 'd' || chara == 'D'){
            cout<<"Enter the Position"<<endl;
            cin>>chara;
            if(chara == 't' || chara == 'T'){
                delete_at(&head,size_of(head)-1);
            }else if(chara == 'h' || chara == 'H'){
            delete_at(&head,0);
            }else if(chara == 'c' || chara == 'C'){
                cout<<"Enter the Custom Position index"<<endl;
                cin>>val;
                delete_at(&head,val);
                }else{
                cout<<"Invalid Output!"<<endl;
                functions();
                }
               }else if(chara == 'p' || chara == 'P'){
                display(head);
                }else if(chara == 'r' || chara == 'R'){
                reversing(&head);
                }else{
                cout<<"Invalid Output!"<<endl;
                functions();
                }
        cin>>chara;
	}
cout<<"Program Terminated"<<endl;
	return 0;
}
