#include "bits/stdc++.h"
using namespace std;
typedef struct node{
int data;
node* left_child ;
node* right_child;
} node ;
node* tree_builder(int new_data , node* root){
    node* temp = new node();
    temp->data = new_data;
    temp->left_child = NULL;
    temp->right_child = NULL;
if(root == NULL){
    root = temp;
    return root;
}
if(root->data > new_data){
  root->left_child = tree_builder(new_data,root->left_child);
}else{
  root->right_child = tree_builder(new_data,root->right_child);
}
return root;
}
void print_inorder(node* root){
        if(root == NULL)
        return;
if(root->left_child != NULL)
    print_inorder(root->left_child);
cout<<root->data<<" ";
if(root->right_child != NULL)
    print_inorder(root->right_child);
return;
}
void print_preorder(node* root){
        if(root == NULL)
        return;
cout<<root->data<<" ";
if(root->left_child != NULL)
    print_preorder(root->left_child);
if(root->right_child != NULL)
    print_preorder(root->right_child);
return;
}
void print_postorder(node* root){
    if(root == NULL)
        return;
if(root->left_child != NULL)
    print_postorder(root->left_child);
if(root->right_child != NULL)
    print_postorder(root->right_child);
cout<<root->data<<" ";
return;
}
bool searcher(node* root, int info){
if(root->data == info)
    return true;
if(root->data > info)
    if(root->left_child == NULL)
    return false;
else
    return searcher(root->left_child,info);
else
    if(root->right_child == NULL)
    return false;
else
    return searcher(root->right_child,info);
}


node* deleter(struct node* root, int info){
    if (root == NULL)
        return root;
    if (info < root->data)
        root->left_child = deleter(root->left_child, info);
    else if (info > root->data)
        root->right_child = deleter(root->right_child, info);
    else {
        if (root->left_child == NULL) {
            struct node* temp = root->right_child;
            free(root);
            return temp;
        }
        else if (root->right_child == NULL) {
            struct node* temp = root->left_child;
            free(root);
            return temp;
        }
       struct node* temp = root->right_child;
       while(temp->left_child != NULL)
        temp = temp->left_child;
        root->data = temp->data;
       root->right_child = deleter(root->right_child, temp->data);
    }
    return root;
}
void functions(){
cout<<"Press [1] to Insert "<<endl<<"Press [2] for In-order-print "<<endl;
cout<<"Press [3] for Post-Order Print"<<endl<<"Press [4] for Pre-order-print "<<endl;
cout<<"Press [5] to Delete a Value"<<endl<<"Press [-1] for Program termination "<<endl;

}

int main(){
    node* root = NULL;
    int n;
    cout<<"Enter the total size of tree"<<endl;
    cin>>n;
    cout<<"The Tree of Size "<<n<<" has following elements"<<endl;
    srand(time(0));
    while(n-->0){
        int val = rand()%50;
        cout<<val<<" ";
        root = tree_builder(val,root);
    }
    cout<<endl;
if(root == NULL){
    cout<<"Fail"<<endl;
    return 0;
}
functions();
cout<<"Issue a new command"<<endl;
cin>>n;
while(n!= -1){
    if(n == 1){
        cout<<"Enter the value to be inserted"<<endl;
        cin>>n;
        root = tree_builder(n,root);
    }else if(n==2){
        cout<<"This is In-Order Print"<<endl;
    print_inorder(root);
    cout<<endl;
    }else if(n == 3){
        cout<<"This is Post-Order Print"<<endl;
        print_postorder(root);
    cout<<endl;
    }else if(n==4){
        cout<<"This is Pre-Order Print"<<endl;
        print_preorder(root);
    cout<<endl;
    }else if(n==5){
    cout<<"Enter the Value to be deleted"<<endl;
    cin>>n;
    if (searcher(root,n))
        deleter(root,n);
    else
        cout<<"Value not Found"<<endl;
    }else{
    cout<<"Invalid Input Try Again!"<<endl;
    functions();
    }
    cin>>n;
}
cout<<"Program Terminated"<<endl;
    return 0;
}
